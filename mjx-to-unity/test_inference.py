import onnxruntime
import numpy as np
from brax.training.acme.running_statistics import normalize
from brax.training.agents.ppo import networks as ppo_networks
from brax.io import model
import jax

input_size = 336
input_data = np.array([[1.2849964,0.9999553,-0.004074247,0.008522511,-0.00038968475,0.0068329712,0.0046100235,0.0055247163,-0.000538969,0.0039991904,-0.0030274605,0.00920974,-0.0025353932,0.008349261,-0.0073895333,0.0022028685,-7.002115e-05,-0.008206737,-0.009423814,0.0065874215,0.009672902,0.006057005,-0.009693892,-0.0033821797,-0.00012861966,0.005783994,-0.009676213,0.005579004,0.004209819,0.0059786914,-0.0022839617,0.00573487,0.008547676,0.007481925,0.0017966175,0.0040949294,-0.007894108,-0.0018061256,0.0045543765,-0.003688228,-0.009475014,0.002712698,-0.007331331,-0.00089732883,-0.007842342,-0.005438006,-0.00671494,0.008686518,0.0031184983,-0.0074219964,-0.0099077625,-0.004746771,0.0025679397,0.9234905,0.9052,0.032183193,5.3630167e-05,0.024809401,-0.002721353,-0.06945287,0.007039952,2.2598538,5.853834,1.1924905,1.1925088,0.009971716,3.788353e-05,0.007547118,-0.005936015,-0.012127641,0.009538722,1.9002947,3.053628,0.07721029,0.07219217,0.010942209,1.0922872e-05,0.008563944,0.00025722635,-0.049629442,-0.0012061486,0.3903301,2.2619467,0.052758414,0.03845571,0.06603644,-0.00026786327,0.0024203376,0.0001473982,-0.30112043,-0.009577546,0.053188752,6.6161942,0.31372556,0.2730215,0.05697592,-0.013332561,-0.029122626,-0.09137992,-0.13783567,-0.46077088,-0.9604157,4.751751,0.99021673,0.96960306,0.030400287,-0.0088781705,-0.055750776,-0.14951028,-0.09529973,-0.2566974,-1.6040549,2.755696,0.77559817,0.7708344,0.016254677,-0.00024360351,-0.0015019212,-0.08660447,-0.0018732857,-0.10531516,-0.93015957,1.1311412,0.31231943,0.27445596,0.055080768,0.013708818,-0.030946825,0.08921503,-0.145642,0.44842377,-0.962796,4.751751,0.99055576,0.9721433,0.030587528,0.0101184575,-0.06550305,0.14648473,-0.11094122,0.25123194,-1.6052313,2.755696,0.776912,0.77251107,0.016192127,0.0012127776,-0.010762068,0.08574859,-0.013212017,0.10417191,-0.9310861,1.1311412,0.3952612,0.30244067,0.12133806,0.034757484,-0.045052648,0.16452707,0.121142626,-0.41087732,0.68502665,1.6610805,0.22166392,0.22551526,0.13619229,0.062417775,-0.103826344,0.09573383,0.25385207,-0.24668099,0.3832192,0.9614576,0.07103121,0.09758999,0.04159424,0.015893938,-0.04643224,0.021711547,0.09545847,-0.044636033,0.13039884,0.26808256,0.3946361,0.298062,0.12479835,-0.035122644,-0.044465598,-0.16614476,0.12060288,0.41805843,0.67982155,1.6610805,0.22262086,0.22282875,0.1373103,-0.06309583,-0.102439165,-0.097038515,0.25159922,0.2513054,0.38131192,0.9614576,0.07138962,0.09679626,0.041358497,-0.016208528,-0.04591966,-0.022353217,0.094479024,0.045991413,0.13029623,0.26808256,0.006073964,-0.0022422692,0.0056505883,-0.008697879,0.008245772,0.0042164093,0.006073964,-0.0022422692,0.0056505883,-0.008697879,0.008245772,0.0042164093,0.006173875,0.005308864,0.0141365975,-0.010491642,0.008443751,0.0040613594,0.007970038,0.0053195474,0.014097601,-0.01049275,0.008636074,0.0040630214,0.011910816,0.0035127401,0.0061218673,-0.009741814,0.008303787,0.004509332,0.011956415,-0.0010413877,0.0061353794,-0.011619801,0.008285441,0.004663733,0.0034899518,-0.004826953,0.001967958,-0.014042141,0.014756774,0.004006556,0.0054206303,0.0043713176,0.021481665,-0.009795899,0.008918542,0.004339888,0.0053920876,0.012213515,0.021519504,-0.006556854,0.00893165,0.0040665683,0.011478011,0.0067837923,0.024372917,-0.0103249345,0.0043014875,0.003750518,0.013281545,-0.0008778336,0.011251458,-0.010312072,0.011839607,0.0054181637,0.0131551,0.004368983,0.00600351,-0.0101233795,0.012702846,0.0062766704,0.0131551,0.004368983,0.00600351,-0.0101233795,0.012702846,0.0062766704,0.014279008,-0.002886413,0.012927808,-0.0071295244,0.01231814,0.0028085602,0.014251696,-0.0047119632,0.011122002,-0.0072029815,0.012618445,0.002506083,0.014251696,-0.0047119632,0.011122002,-0.0072029815,0.012618445,0.002506083,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]], dtype=np.float32)

ppo_network = ppo_networks.make_ppo_networks(
      336,
      21,
      preprocess_observations_fn=normalize)
model_path = 'params.pickle'
params = model.load_params(model_path)
logits = ppo_network.policy_network.apply(*params, input_data)

brax_result = ppo_network.parametric_action_distribution.mode(logits)
normed_data = np.array(normalize(input_data, params[0]))

# Load the ONNX model
onnx_model_path = 'feedforward_model.onnx'
onnx_session = onnxruntime.InferenceSession(onnx_model_path)
# Run inference
input_name = onnx_session.get_inputs()[0].name
output_names = [ output.name for output in onnx_session.get_outputs()]

result = onnx_session.run(output_names, {input_name: input_data})

# Extract the output
brax_compare = result[0]

